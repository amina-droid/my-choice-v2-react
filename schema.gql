# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

interface Card {
    _id: ObjectId!
    description: String!
    img: String
    type: FieldType!
    typeName: String!
}

union ChatEvent = Message | RemoveMessage

type Action {
    less: Resources
    more: Resources
    result: Result
}

type AuthRedirect {
    url: String!
}

type Author {
    _id: ObjectId!
    avatar: String
    nickname: String!
}

type ChoiceCard implements Card {
    _id: ObjectId!
    choices: [Option!]!
    description: String!
    img: String
    type: FieldType!
    typeName: String!
}

type ChoiceOption {
    cardId: ObjectId!
    choiceId: ObjectId
}

type DroppedCard {
    card: Card!
    forPlayer: ObjectId!
}

type Game {
    _id: ObjectId!
    createdAt: DateTime!
    creator: User!
    name: String!
    players: [User!]!
    tournament: Tournament
    winner: User
}

type GameSession {
    _id: ObjectId!
    creator: ObjectId!
    mover: ObjectId
    name: String!
    observers: Int!
    players: [Player!]!
    playersCount: Int!
    status: GameStatus!
    timers: GameSessionTimers
    tournament: ObjectId
    winner: ObjectId
}

type GameSessionTimers {
    card: DateTime
    dice: DateTime
    dream: DateTime
}

type GamesWithCounter {
    games: [Game!]!
    totalCount: Int!
}

type Incident implements Card {
    _id: ObjectId!
    action: Action!
    description: String!
    img: String
    type: FieldType!
    typeName: String!
}

type Message {
    _id: ObjectId!
    author: Author!
    createdAt: DateTime!
    message: String!
}

type Mutation {
    authVK(code: String!, extra: String): Tokens!
    choice(cardId: ObjectId!, choiceId: ObjectId): Boolean!
    choiceDream(dream: Int!): Boolean!
    createChoicesCard(createChoicesCard: CreateChoicesCardInput!): Card!
    createGame(createGameInput: CreateGameInput!): GameSession!
    createIncidentCard(createIncidentCard: CreateIncidentCardInput!): Card!
    createTournament(name: String!): Tournament!
    deleteGame(gameId: ObjectId!): Boolean!
    deleteMessage(messageId: ObjectId!): Boolean!
    leaveGame(gameId: ObjectId!): Boolean!
    move(moveCount: Int!): Boolean!
    opportunityResult(diceResult: Int, opportunityId: ObjectId!): Boolean!
    refreshTokens(oldTokens: TokensInput!): Tokens!
    removeCard(cardId: ObjectId!): Card!
    sendMessage(message: String!, topic: String!): Boolean!
    shareResources(shareResourcesInput: ShareResourcesInput!): Boolean!
    startGame(gameId: ObjectId!): Boolean!
    updateChoicesCard(cardId: ObjectId!, updateChoicesCard: UpdateChoicesCardInput!): Card!
    updateIncidentCard(cardId: ObjectId!, updateIncidentCard: UpdateIncidentCardInput!): Card!
    updateNickname(nickname: String!): User!
}

type Opportunity implements Card {
    _id: ObjectId!
    canTryLuck: Boolean!
    description: String!
    img: String
    type: FieldType!
    typeName: String!
}

type Option {
    _id: ObjectId!
    description: String!
    resources: Resources!
}

type Player {
    _id: ObjectId!
    avatar: String
    cell: Int
    disconnected: Boolean
    dream: Int
    gameover: Boolean
    hold: Int
    nickname: String!
    position: PlayerPosition
    resources: Resources
    sex: UserSex!
    winner: Boolean
}

type Query {
    card(_id: ObjectId!): Card!
    cards: [Card!]!
    game(_id: ObjectId!): Game!
    getActiveGames: [GameSession!]!
    getVKOAuthRedirect: AuthRedirect!
    joinGame(gameId: ObjectId!): GameSession!
    messages(limit: Int, offset: Int, topic: String!): [Message!]!
    tournamentGames(limit: Int, offset: Int, tournamentId: ObjectId): GamesWithCounter!
    tournaments: [Tournament!]!
    user(_id: ObjectId!): User
    userGames(userId: ObjectId): [Game!]!
}

type RemoveMessage {
    _id: ObjectId!
}

type Resources {
    dark: Int
    lives: Int
    money: Int
    white: Int
}

type Result {
    gameover: Boolean
    hold: Int
    move: FieldType
    resources: Resources
}

type Subscription {
    cardDropped(gameId: ObjectId!): DroppedCard!
    onMessage(topic: String!): ChatEvent!
    playerChoice(gameId: ObjectId!): ChoiceOption!
    updateActiveGame(gameId: ObjectId!): GameSession!
    updateActiveGames: [GameSession!]!
}

type Tokens {
    access: String!
    refresh: String!
}

type Tournament {
    _id: ObjectId!
    name: String!
}

type User {
    _id: ObjectId!
    email: String
    isBot: Boolean
    name: UserName!
    nickname: String!
    photos: [UserPhoto!]!
    role: UserRole!
    sex: UserSex!
}

type UserName {
    familyName: String!
    givenName: String!
}

type UserPhoto {
    url: String!
}

type VKProvider {
    id: String!
    link: String!
    token: String!
}

enum FieldType {
    Activity
    Dream
    Incident
    Offer
    Opportunity
    Problem
    Reaction
    Situation
    Start
}

enum GameStatus {
    Awaiting
    ChoiceDream
    Finished
    InProgress
}

enum PlayerPosition {
    Awaiting
    Inner
    Outer
    Start
}

enum ResourceType {
    dark
    lives
    money
    white
}

enum UserRole {
    Admin
    Moderator
    User
}

enum UserSex {
    Female
    Male
    Undefined
}

input ActionInput {
    less: ResourcesInput
    more: ResourcesInput
    result: ResultInput
}

input CreateChoicesCardInput {
    choices: [OptionInput!]!
    description: String!
    type: FieldType!
}

input CreateGameInput {
    name: String!
    observerMode: Boolean = false
    tournament: ObjectId
}

input CreateIncidentCardInput {
    action: ActionInput!
    description: String!
}

input OptionInput {
    description: String!
    resources: ResourcesInput!
}

input ResourcesInput {
    dark: Int
    lives: Int
    money: Int
    white: Int
}

input ResultInput {
    gameover: Boolean
    hold: Int
    move: FieldType
    resources: ResourcesInput
}

input ShareResourcesInput {
    exchange: ResourceType!
    for: ResourceType!
}

input TokensInput {
    access: String!
    refresh: String!
}

input UpdateChoicesCardInput {
    choices: [OptionInput!]
    description: String
    type: FieldType
}

input UpdateIncidentCardInput {
    action: ActionInput
    description: String
}


"Mongo objectId scalar type"
scalar ObjectId

"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime
